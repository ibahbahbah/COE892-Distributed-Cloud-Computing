# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rovers_pb2 as rovers__pb2


class roversStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMap = channel.unary_unary(
                '/rovers/getMap',
                request_serializer=rovers__pb2.mapRequest.SerializeToString,
                response_deserializer=rovers__pb2.mapReply.FromString,
                )
        self.getCommandStream = channel.unary_unary(
                '/rovers/getCommandStream',
                request_serializer=rovers__pb2.commandStreamRequest.SerializeToString,
                response_deserializer=rovers__pb2.commandStreamReply.FromString,
                )
        self.getMineSerial = channel.unary_unary(
                '/rovers/getMineSerial',
                request_serializer=rovers__pb2.serialNumRequest.SerializeToString,
                response_deserializer=rovers__pb2.serialNumReply.FromString,
                )
        self.completedCommands = channel.unary_unary(
                '/rovers/completedCommands',
                request_serializer=rovers__pb2.completedRequest.SerializeToString,
                response_deserializer=rovers__pb2.completedReply.FromString,
                )
        self.sendPin = channel.unary_unary(
                '/rovers/sendPin',
                request_serializer=rovers__pb2.pinRequest.SerializeToString,
                response_deserializer=rovers__pb2.pinReply.FromString,
                )


class roversServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCommandStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMineSerial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def completedCommands(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendPin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_roversServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMap': grpc.unary_unary_rpc_method_handler(
                    servicer.getMap,
                    request_deserializer=rovers__pb2.mapRequest.FromString,
                    response_serializer=rovers__pb2.mapReply.SerializeToString,
            ),
            'getCommandStream': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommandStream,
                    request_deserializer=rovers__pb2.commandStreamRequest.FromString,
                    response_serializer=rovers__pb2.commandStreamReply.SerializeToString,
            ),
            'getMineSerial': grpc.unary_unary_rpc_method_handler(
                    servicer.getMineSerial,
                    request_deserializer=rovers__pb2.serialNumRequest.FromString,
                    response_serializer=rovers__pb2.serialNumReply.SerializeToString,
            ),
            'completedCommands': grpc.unary_unary_rpc_method_handler(
                    servicer.completedCommands,
                    request_deserializer=rovers__pb2.completedRequest.FromString,
                    response_serializer=rovers__pb2.completedReply.SerializeToString,
            ),
            'sendPin': grpc.unary_unary_rpc_method_handler(
                    servicer.sendPin,
                    request_deserializer=rovers__pb2.pinRequest.FromString,
                    response_serializer=rovers__pb2.pinReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rovers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rovers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rovers/getMap',
            rovers__pb2.mapRequest.SerializeToString,
            rovers__pb2.mapReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCommandStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rovers/getCommandStream',
            rovers__pb2.commandStreamRequest.SerializeToString,
            rovers__pb2.commandStreamReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMineSerial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rovers/getMineSerial',
            rovers__pb2.serialNumRequest.SerializeToString,
            rovers__pb2.serialNumReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def completedCommands(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rovers/completedCommands',
            rovers__pb2.completedRequest.SerializeToString,
            rovers__pb2.completedReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendPin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rovers/sendPin',
            rovers__pb2.pinRequest.SerializeToString,
            rovers__pb2.pinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
